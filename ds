use serde_json::json;
use sysinfo::{System, SystemExt, DiskExt, ProcessorExt};

// status 우선순위 비교 함수
fn compare_status(current: &str, new: &str) -> String {
    match (current, new) {
        ("critical", _) | (_, "critical") => "critical".to_string(),
        ("warning", _) | (_, "warning") => "warning".to_string(),
        _ => "normal".to_string(),
    }
}

pub async fn get_reports(_token: Option<String>) -> Result<impl warp::Reply, warp::Rejection> {
    // 1. 기존 데이터 가져오기 (Vec<Report> 타입)
    let reports = match diagnosis::get_reports().await {
        Ok(reports) => reports,  // ✅ Vec<Report> 그대로 사용
        Err(e) => {
            error!("get_reports failed: {}", e);
            return Ok(warp::reply::json(&json!({
                "error": "get_reports failed"
            })));
        }
    };

    // 2. sysinfo로 실시간 시스템 정보 가져오기
    let mut sys = System::new_all();
    sys.refresh_all();

    // 3. 실시간 사용률 계산 (sysinfo에서 직접 가져옴)
    let cpu_usage_real = sys.global_processor_info().cpu_usage();
    let total_memory = sys.total_memory();
    let used_memory = sys.used_memory();
    let memory_usage_real = (used_memory as f32 / total_memory as f32) * 100.0;

    let mut total_space = 0;
    let mut used_space = 0;
    for disk in sys.disks() {
        total_space += disk.total_space();
        used_space += disk.total_space() - disk.available_space();
    }
    let storage_usage_real = (used_space as f32 / total_space as f32) * 100.0;

    // USB 사용량 계산
    let mut usb_total = 0;
    let mut usb_used = 0;
    let mut usb_connected = false;
    for disk in sys.disks() {
        let disk_name = disk.name().to_str().unwrap_or("").to_lowercase();
        if disk_name.contains("usb") {
            usb_total += disk.total_space();
            usb_used += disk.total_space() - disk.available_space();
            usb_connected = true;
        }
    }
    let usb_usage_real = if usb_total > 0 {
        (usb_used as f32 / usb_total as f32) * 100.0
    } else {
        0.0
    };
    let usb = UsbStatus {
        connected: usb_connected,
        total: if usb_connected { Some(usb_total) } else { None },
        used: if usb_connected { Some(usb_used) } else { None },
        usage: if usb_connected { Some(usb_usage_real) } else { None }
    };

    // 4. status 및 issues 계산 (기존 응답 기반)
    let mut issues = Vec::new();
    let mut status = "normal".to_string();

    for report in &reports {
        for app in &report.apps {
            for item in &app.items {
                let new_status = match item.name.as_str() {
                    "cpu_usage_warning" => {
                        if matches!(item.result, ReportPassFail::Fail) {
                            issues.push("HIGH_CPU".to_string());
                            "warning"
                        } else {
                            "normal"
                        }
                    }
                    "cpu_usage_fatal" => {
                        if matches!(item.result, ReportPassFail::Fail) {
                            issues.push("HIGH_CPU".to_string());
                            "critical"
                        } else {
                            "normal"
                        }
                    }
                    "memory_usage_warning" => {
                        if matches!(item.result, ReportPassFail::Fail) {
                            issues.push("HIGH_MEMORY".to_string());
                            "warning"
                        } else {
                            "normal"
                        }
                    }
                    "memory_usage_fatal" => {
                        if matches!(item.result, ReportPassFail::Fail) {
                            issues.push("HIGH_MEMORY".to_string());
                            "critical"
                        } else {
                            "normal"
                        }
                    }
                    "storage_usage_warning" => {
                        if matches!(item.result, ReportPassFail::Fail) {
                            issues.push("LOW_STORAGE".to_string());
                            "warning"
                        } else {
                            "normal"
                        }
                    }
                    "storage_usage_fatal" => {
                        if matches!(item.result, ReportPassFail::Fail) {
                            issues.push("LOW_STORAGE".to_string());
                            "critical"
                        } else {
                            "normal"
                        }
                    }
                    _ => "normal"
                };
                status = compare_status(&status, new_status);
            }
        }
    }

    // 5. 새로운 응답 구조체 생성
    let new_response = NewResponse {
        timestamp: reports.get(0).map_or(0, |r| r.published_time), // 첫 번째 Report의 published_time 사용
        status,
        issues,
        cpu_usage: cpu_usage_real,
        memory_usage: memory_usage_real,
        storage: StorageInfo {
            total: total_space,
            used: used_space,
            usage: storage_usage_real
        },
        usb,
        network_connected: sys.networks().len() > 0,
        tms_connected: false
    };

    Ok(warp::reply::json(&json!(new_response)))
}
