use serde_json::{json, Value};

async fn transform_report(id: i64) -> Result<impl warp::Reply, warp::Rejection> {
    // 1. 기존 데이터를 가져옴 (그대로 JSON 반환)
    let report = match diagnosis::get_report(id).await {
        Ok(report) => report,
        Err(e) => {
            error!("get_report failed: {}", e);
            return Ok(warp::reply::json(&json!({
                "error": "get_report failed"
            })));
        }
    };

    // 2. JSON 파싱 (`serde_json::Value` 타입)
    let report_json: Value = serde_json::from_value(report).unwrap();

    // 3. 필요한 데이터 추출
    let mut cpu_usage = None;
    let mut memory_usage = None;
    let mut storage = None;
    let mut usb_connected = false;
    let mut network_connected = false;
    let mut tms_connected = false;
    let mut issues = Vec::new();
    let mut status = "normal".to_string();

    // 4. 데이터 가공 및 매핑
    if let Some(data) = report_json["data"].as_array() {
        for app in data.iter().flat_map(|d| d["apps"].as_array().unwrap()) {
            for item in app["items"].as_array().unwrap() {
                match item["name"].as_str().unwrap() {
                    "cpu_usage_fatal" | "cpu_usage_warning" => {
                        cpu_usage = Some(87.2); // TODO: 실제 데이터로 매핑
                        if item["result"].as_str().unwrap() != "pass" {
                            issues.push("HIGH_CPU".to_string());
                            status = "warning".to_string();
                        }
                    }
                    "memory_usage_fatal" | "memory_usage_warning" => {
                        memory_usage = Some(74.5); // TODO: 실제 데이터로 매핑
                        if item["result"].as_str().unwrap() != "pass" {
                            issues.push("HIGH_MEMORY".to_string());
                            status = "warning".to_string();
                        }
                    }
                    "storage_usage_fatal" | "storage_usage_warning" => {
                        storage = Some(StorageInfo { total: 500000, used: 450000, usage: 90.0 });
                        if item["result"].as_str().unwrap() != "pass" {
                            issues.push("LOW_STORAGE".to_string());
                            status = "warning".to_string();
                        }
                    }
                    "connection" => {
                        network_connected = item["result"].as_str().unwrap() == "pass";
                    }
                    _ => {}
                }
            }
        }
    }

    // 5. USB 연결 여부 확인
    if cpu_usage.is_some() && memory_usage.is_some() {
        usb_connected = true;
    }

    // 6. 새로운 응답 구조체 생성
    let new_response = NewResponse {
        timestamp: "2025-02-19T12:00:00Z".to_string(),  // TODO: 실제 publishedTime으로 설정
        status,
        issues,
        cpu_usage,
        memory_usage,
        storage,
        usb: UsbStatus {
            connected: usb_connected,
            total: if usb_connected { Some(128000) } else { None },
            used: if usb_connected { Some(80000) } else { None },
            usage: if usb_connected { Some(62.5) } else { None }
        },
        network_connected,
        tms_connected,
    };

    // 7. JSON 응답으로 변환 및 반환
    let json_output = serde_json::to_string_pretty(&new_response).unwrap();
    Ok(warp::reply::json(&json!(json_output)))
}
