  pub async fn get_latest_report(
        _token: Option<String>,
    ) -> Result<impl warp::Reply, warp::Rejection> {
        // TODO 권한 추가
        // if !access_control().check_permission(token.as_deref(), Permission::) {
        //     return Ok(Response::err("Permission denied".to_string()));
        // }

        info!("get_latest_report");
        
        // 1. 진단앱 결과 데이터 가져오기 (Vec<Report> 타입)
        let report = match diagnosis::get_latest_report().await {
            Ok(report) => report,
            Err(e) => {
                error!("get_latest_report failed: {}", e);
                return Ok(Response::err("get_latest_report failed".to_string()));
            }
        };

        // 2. sysinfo로 실시간 시스템 정보 가져오기
        let mut sys = System::new_all();
        sys.refresh_all();

         // 3. 실시간 사용률 계산 (sysinfo에서 직접 가져옴)

        // CPU 사용률 계산  
        let cpu_count = sys.cpus().len();

        // CPU 사용량을 측정하기 위해 잠시 대기
        thread::sleep(Duration::from_secs(1)); // 1초 대기

        // 시스템 정보 다시 갱신
        sys.refresh_all();


        let cpu_usage: f32 = sys.cpus().iter()
        .map(|cpu| cpu.cpu_usage())
        .sum::<f32>() / cpu_count as f32; // 평균 CPU 사용률 계산

        //디스크 및 USB 사용률
        let disks = Disks::new_with_refreshed_list();
        let mut usb_total_space = 0;
        let mut usb_used_space = 0;
        let mut regular_total_space = 0;
        let mut regular_used_space = 0;
        let mut usb_connected = false;

        for disk in disks.list() {
            let disk_total = disk.total_space();
            let disk_used = disk_total - disk.available_space();

            if disk.is_removable() {
                // USB 드라이브의 경우
                usb_connected = true; // USB가 연결되어 있음을 표시
                usb_total_space += disk_total;
                usb_used_space += disk_used;
            } else {
                // 일반 디스크의 경우
                regular_total_space += disk_total;
                regular_used_space += disk_used;
            }
        }

        // USB 드라이브 사용량 비율 계산
        let usb_usage = if usb_total_space > 0 {
            (usb_used_space as f32 / usb_total_space as f32) * 100.0
        } else {
            0.0
        };

        // 일반 디스크 사용량 비율 계산
        let regular_usage = if regular_total_space > 0 {
            (regular_used_space as f32 / regular_total_space as f32) * 100.0
        } else {
            0.0
        };

        // 4. status 및 issues 계산 (기존 응답 기반)
        let mut issues = Vec::new();
        let mut system_status = "normal".to_string();

        for report in &status {
            for app in &report.apps {
                for item in &app.items {
                    let new_status = match item.name.as_str() {
                        "cpu_usage_warning" => {
                            if matches!(item.result, ReportPassFail::Fail) {
                                issues.push("HIGH_CPU".to_string());
                                "warning"
                            } else {
                                "normal"
                            }
                        }
                        "cpu_usage_fatal" => {
                            if matches!(item.result, ReportPassFail::Fail) {
                                issues.push("HIGH_CPU".to_string());
                                "critical"
                            } else {
                                "normal"
                            }
                        }
                        "memory_usage_warning" => {
                            if matches!(item.result, ReportPassFail::Fail) {
                                issues.push("HIGH_MEMORY".to_string());
                                "warning"
                            } else {
                                "normal"
                            }
                        }
                        "memory_usage_fatal" => {
                            if matches!(item.result, ReportPassFail::Fail) {
                                issues.push("HIGH_MEMORY".to_string());
                                "critical"
                            } else {
                                "normal"
                            }
                        }
                        "storage_usage_warning" => {
                            if matches!(item.result, ReportPassFail::Fail) {
                                issues.push("LOW_STORAGE".to_string());
                                "warning"
                            } else {
                                "normal"
                            }
                        }
                        "storage_usage_fatal" => {
                            if matches!(item.result, ReportPassFail::Fail) {
                                issues.push("LOW_STORAGE".to_string());
                                "critical"
                            } else {
                                "normal"
                            }
                        }
                        _ => "normal"
                    };
                    system_status = compare_status(&system_status, new_status);
                }
            }
        }

        Ok(Response::ok_with_data(json!(report)))
    }

failed to resolve: use of undeclared type `ReportPassFail`
use of undeclared type `ReportPassFail`rustcClick for full compiler diagnostic
diagnosis.rs(78, 5): consider importing this enum: `use platform_common_types::diagnosis::ReportPassFail;
