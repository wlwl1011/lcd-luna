#include "lvgl.h"

// 스타일 선언
static lv_style_t style_bg;
static lv_style_t style_btn;
static lv_style_t style_disabled;
static lv_style_t style_focused;
static lv_style_t style_checked;

// 스타일 초기화 함수
void init_styles() {
    // 🔹 배경 스타일
    lv_style_init(&style_bg);
    lv_style_set_pad_all(&style_bg, 0);
    lv_style_set_pad_gap(&style_bg, 0);
    lv_style_set_clip_corner(&style_bg, true);
    lv_style_set_radius(&style_bg, LV_RADIUS_CIRCLE);
    lv_style_set_border_width(&style_bg, 0);

    // 🔹 기본 버튼 스타일
    lv_style_init(&style_btn);
    lv_style_set_radius(&style_btn, 0);
    lv_style_set_border_width(&style_btn, 1);
    lv_style_set_border_opa(&style_btn, 0);

    // 🔹 Disabled(비활성화) 상태 스타일
    lv_style_init(&style_disabled);
    lv_style_set_bg_color(&style_disabled, lv_color_make(COLOR_DARK_BLUE)); // 기존 배경 유지
    lv_style_set_text_opa(&style_disabled, LV_OPA_40);  // 텍스트 불투명도 40%
    lv_style_set_text_color(&style_disabled, lv_color_make(COLOR_WHITE_RGB)); // 비활성화 상태의 글자색

    // 🔹 Focused(초점) 상태 스타일
    lv_style_init(&style_focused);
    lv_style_set_bg_color(&style_focused, lv_color_make(COLOR_WHITE_RGB));  // 초점 상태 배경색 (흰색)
    lv_style_set_text_color(&style_focused, lv_color_make(COLOR_DARK_BLUE)); // 초점 상태 텍스트 색상

    // 🔹 Checked(선택됨) 상태 스타일
    lv_style_init(&style_checked);
    lv_style_set_bg_color(&style_checked, lv_color_make(COLOR_BLUE_RGB)); // 선택된 상태의 배경 색상
    lv_style_set_text_color(&style_checked, lv_color_make(COLOR_WHITE_RGB)); // 선택된 상태의 글자색
}

// 🔹 키보드 이벤트 핸들러 (비활성화된 버튼을 건너뜀)
void btnmatrix_event_handler(lv_event_t *e) {
    lv_obj_t *btnmatrix = lv_event_get_target(e);
    uint32_t btn_id = lv_btnmatrix_get_selected_btn(btnmatrix);

    lv_indev_t *indev = lv_event_get_indev(e);
    lv_key_t key = lv_indev_get_key(indev); // 입력된 키 확인 (예: LV_KEY_LEFT, LV_KEY_RIGHT)

    uint32_t new_btn_id = btn_id; // 현재 버튼을 기본값으로 설정

    if (key == LV_KEY_RIGHT) {  // ▶ 오른쪽 이동
        while (new_btn_id < lv_btnmatrix_get_btn_count(btnmatrix) - 1) { 
            new_btn_id++;
            if (!lv_btnmatrix_has_btn_ctrl(btnmatrix, new_btn_id, LV_BTNMATRIX_CTRL_DISABLED)) {
                break;  // 활성화된 버튼을 찾으면 종료
            }
        }
    } else if (key == LV_KEY_LEFT) {  // ◀ 왼쪽 이동
        while (new_btn_id > 0) { 
            new_btn_id--;
            if (!lv_btnmatrix_has_btn_ctrl(btnmatrix, new_btn_id, LV_BTNMATRIX_CTRL_DISABLED)) {
                break;  // 활성화된 버튼을 찾으면 종료
            }
        }
    }

    // 찾은 버튼으로 초점 이동
    lv_btnmatrix_set_selected_btn(btnmatrix, new_btn_id);
}

// 🔹 버튼 매트릭스 생성 함수
lv_obj_t* CreateKeyMatrix(lv_obj_t* pParent, UINT32 ulAlignment, INT16 x, INT16 y, const char** pBtnData, bool isScreenWidth) {
    // 스타일 초기화
    init_styles();

    lv_obj_t* btnm = lv_btnmatrix_create(pParent);
    lv_btnmatrix_set_map(btnm, pBtnData);
    
    // 스타일 적용
    lv_obj_add_style(btnm, &style_bg, LV_PART_MAIN);
    lv_obj_add_style(btnm, &style_btn, LV_PART_ITEMS);
    lv_obj_add_style(btnm, &style_disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
    lv_obj_add_style(btnm, &style_focused, LV_PART_ITEMS | LV_STATE_FOCUSED | LV_STATE_FOCUS_KEY | LV_STATE_PRESSED);
    lv_obj_add_style(btnm, &style_checked, LV_PART_ITEMS | LV_STATE_CHECKED | LV_STATE_FOCUSED);

    if (isScreenWidth) {
        lv_obj_set_size(btnm, SCREEN_WIDTH, 48);
    }

    /* Allow selecting only one button at a time */
    lv_btnmatrix_set_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECKABLE);
    lv_btnmatrix_set_one_checked(btnm, true);
    lv_btnmatrix_set_btn_ctrl(btnm, 0, LV_BTNMATRIX_CTRL_CHECKED);

    // 🔹 특정 버튼 비활성화
    lv_btnmatrix_set_btn_ctrl(btnm, 2, LV_BTNMATRIX_CTRL_DISABLED);  // 2번 버튼 비활성화
    lv_btnmatrix_set_btn_ctrl(btnm, 4, LV_BTNMATRIX_CTRL_DISABLED);  // 4번 버튼 비활성화

    lv_obj_set_style_text_font(btnm, &KR_FONT_20M, LV_PART_MAIN | LV_STATE_DEFAULT);

    // 기본 배경 색상 적용
    lv_obj_set_style_bg_color(btnm, lv_color_make(COLOR_DARK_BLUE), LV_PART_ITEMS);
    lv_obj_set_style_text_color(btnm, lv_color_make(COLOR_WHITE_RGB), LV_PART_ITEMS | LV_STATE_DEFAULT); // 기본 텍스트 색상

    // 텍스트 중앙 정렬
    lv_obj_set_style_text_align(btnm, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN);
    lv_obj_align(btnm, ulAlignment, x, y);

    // 🔹 비활성 버튼 초점 이동 방지 이벤트 추가
    lv_obj_add_event_cb(btnm, btnmatrix_event_handler, LV_EVENT_KEY, NULL);

    return btnm;
}
